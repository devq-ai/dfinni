name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Check for changes
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'patient-dashboard/backend/**'
              - 'requirements.txt'
            frontend:
              - 'patient-dashboard/frontend/**'
              - 'package*.json'
            docs:
              - '**/*.md'
              - 'docs/**'

  # Lint Python code
  lint-python:
    name: Lint Python
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install linting tools
        run: |
          pip install black flake8 isort mypy
      
      - name: Run Black
        working-directory: ./patient-dashboard/backend
        run: black --check app/
      
      - name: Run Flake8
        working-directory: ./patient-dashboard/backend
        run: flake8 app/ --max-line-length=120 --extend-ignore=E203,W503
      
      - name: Run isort
        working-directory: ./patient-dashboard/backend
        run: isort --check-only app/
      
      - name: Run MyPy
        working-directory: ./patient-dashboard/backend
        run: mypy app/ --ignore-missing-imports || true

  # Lint JavaScript/TypeScript
  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./patient-dashboard/frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./patient-dashboard/frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: ./patient-dashboard/frontend
        run: npm run lint
      
      - name: Run Prettier check
        working-directory: ./patient-dashboard/frontend
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,css,md}"

  # Check for secrets
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for hardcoded secrets
        run: |
          # Check for potential secrets in code
          if grep -r -E "(PFINNI_|SECRET|PASSWORD|TOKEN|KEY).*=.*['\"][^'\"]{10,}" --include="*.py" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --exclude-dir=".git" --exclude-dir="node_modules" --exclude-dir=".next" --exclude-dir="__pycache__" .; then
            echo "❌ Found potential hardcoded secrets!"
            exit 1
          else
            echo "✅ No hardcoded secrets found"
          fi

  # Dependency check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Python dependency check
        if: needs.changes.outputs.backend == 'true'
        working-directory: ./patient-dashboard/backend
        run: |
          pip install safety
          safety check -r requirements.txt || true
      
      - name: Run npm audit
        if: needs.changes.outputs.frontend == 'true'
        working-directory: ./patient-dashboard/frontend
        run: npm audit --production

  # Size check
  bundle-size:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        working-directory: ./patient-dashboard/frontend
        run: npm ci
      
      - name: Build and analyze bundle
        working-directory: ./patient-dashboard/frontend
        run: |
          npm run build
          echo "### Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          find .next -name "*.js" -type f -exec du -h {} + | sort -hr | head -20 | while read size file; do
            echo "| ${file#.next/} | $size |" >> $GITHUB_STEP_SUMMARY
          done

  # PR Comment
  pr-comment:
    name: PR Summary Comment
    runs-on: ubuntu-latest
    needs: [lint-python, lint-frontend, secret-scan, dependency-check]
    if: always()
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const checks = [
              { name: 'Python Linting', status: '${{ needs.lint-python.result }}' },
              { name: 'Frontend Linting', status: '${{ needs.lint-frontend.result }}' },
              { name: 'Secret Scanning', status: '${{ needs.secret-scan.result }}' },
              { name: 'Dependency Check', status: '${{ needs.dependency-check.result }}' }
            ];
            
            const checkResults = checks.map(check => {
              const emoji = check.status === 'success' ? '✅' : 
                           check.status === 'failure' ? '❌' : 
                           check.status === 'skipped' ? '⏭️' : '⏸️';
              return `${emoji} ${check.name}: ${check.status}`;
            }).join('\n');
            
            const comment = `## PR Check Summary\n\n${checkResults}\n\n---\n*Generated by GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });