name: Security Scan

on:
  schedule:
    # Run at 2 AM UTC every Monday
    - cron: '0 2 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # OWASP Dependency Check
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'pfinni-dashboard'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
      
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/
          retention-days: 30

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    strategy:
      matrix:
        language: ['python', 'javascript']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Container Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build backend image
        run: |
          docker build -t pfinni-backend:scan ./patient-dashboard/backend
      
      - name: Build frontend image
        run: |
          docker build -t pfinni-frontend:scan ./patient-dashboard/frontend \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=dummy \
            --build-arg NEXT_PUBLIC_API_URL=http://localhost:8001
      
      - name: Run Trivy on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pfinni-backend:scan'
          format: 'sarif'
          output: 'backend-trivy.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Run Trivy on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pfinni-frontend:scan'
          format: 'sarif'
          output: 'frontend-trivy.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload backend scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'backend-trivy.sarif'
          category: 'container-backend'
      
      - name: Upload frontend scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'frontend-trivy.sarif'
          category: 'container-frontend'

  # Python Security Audit
  python-security:
    name: Python Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        working-directory: ./patient-dashboard/backend
        run: |
          pip install -r requirements.txt
          pip install bandit safety semgrep
      
      - name: Run Bandit
        working-directory: ./patient-dashboard/backend
        run: |
          bandit -r app/ -ll -f json -o bandit-report.json
      
      - name: Run Safety check
        working-directory: ./patient-dashboard/backend
        run: |
          safety check --json > safety-report.json || true
      
      - name: Run Semgrep
        working-directory: ./patient-dashboard/backend
        run: |
          semgrep --config=auto --json -o semgrep-report.json app/
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: python-security-reports
          path: |
            ./patient-dashboard/backend/bandit-report.json
            ./patient-dashboard/backend/safety-report.json
            ./patient-dashboard/backend/semgrep-report.json
          retention-days: 30

  # npm Security Audit
  npm-security:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        working-directory: ./patient-dashboard/frontend
        run: npm ci
      
      - name: Run npm audit
        working-directory: ./patient-dashboard/frontend
        run: |
          npm audit --json > npm-audit-report.json || true
      
      - name: Check for critical vulnerabilities
        working-directory: ./patient-dashboard/frontend
        run: |
          if npm audit --audit-level=critical; then
            echo "✅ No critical vulnerabilities found"
          else
            echo "❌ Critical vulnerabilities found!"
            exit 1
          fi
      
      - name: Upload npm audit report
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-report
          path: ./patient-dashboard/frontend/npm-audit-report.json
          retention-days: 30

  # HIPAA Compliance Check
  hipaa-compliance:
    name: HIPAA Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for PHI exposure
        run: |
          echo "Checking for potential PHI exposure..."
          
          # Check for console.log with patient data
          if grep -r "console\.log.*patient" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" ./patient-dashboard/; then
            echo "⚠️  Warning: Found console.log statements with potential patient data"
          fi
          
          # Check for unencrypted storage
          if grep -r "localStorage\.setItem.*patient\|sessionStorage\.setItem.*patient" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" ./patient-dashboard/; then
            echo "❌ Error: Found unencrypted patient data in browser storage"
            exit 1
          fi
          
          # Check for missing audit logging
          if ! grep -r "audit_log\|auditLog" ./patient-dashboard/backend/app/; then
            echo "⚠️  Warning: Audit logging implementation not found"
          fi
          
          echo "✅ Basic HIPAA compliance checks passed"

  # Summary Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, codeql, container-scan, python-security, npm-security, hipaa-compliance]
    if: always()
    
    steps:
      - name: Create summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| OWASP Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Scan | ${{ needs.container-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Security | ${{ needs.python-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| NPM Security | ${{ needs.npm-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| HIPAA Compliance | ${{ needs.hipaa-compliance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Security scan completed at $(date)*" >> $GITHUB_STEP_SUMMARY