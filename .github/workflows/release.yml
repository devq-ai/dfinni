name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get commit messages since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
          fi
          
          # Format changelog
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Docker Images
            - Backend: `docker pull ${{ secrets.DOCKER_USERNAME }}/pfinni-backend:${{ steps.version.outputs.version }}`
            - Frontend: `docker pull ${{ secrets.DOCKER_USERNAME }}/pfinni-frontend:${{ steps.version.outputs.version }}`
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  # Build and publish Docker images
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./patient-dashboard/backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/pfinni-backend:${{ needs.create-release.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/pfinni-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./patient-dashboard/frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/pfinni-frontend:${{ needs.create-release.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/pfinni-frontend:latest
          build-args: |
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
            NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create deployment artifacts
  create-artifacts:
    name: Create Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment bundle
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy deployment files
          cp -r patient-dashboard/deployment/* deployment/
          cp docker-compose.yml deployment/
          cp docker-compose.prod.yml deployment/
          
          # Create environment template
          cat > deployment/.env.template << EOF
          # SurrealDB Configuration
          PFINNI_SURREALDB_URL=
          PFINNI_SURREALDB_USERNAME=
          PFINNI_SURREALDB_PASSWORD=
          PFINNI_SURREALDB_DATABASE=
          PFINNI_SURREALDB_NAMESPACE=
          
          # Security Keys
          PFINNI_SECRET_KEY=
          PFINNI_JWT_SECRET_KEY=
          PFINNI_ENCRYPTION_KEY=
          
          # Clerk Authentication
          PFINNI_CLERK_SECRET_KEY=
          PFINNI_CLERK_PUBLISHABLE_KEY=
          
          # External Services
          PFINNI_LOGFIRE_TOKEN=
          PFINNI_RESEND_API_KEY=
          
          # Application Settings
          ENVIRONMENT=production
          PFINNI_RATE_LIMIT_ENABLED=true
          EOF
          
          # Create deployment script
          cat > deployment/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Pfinni Dashboard Deployment Script"
          echo "Version: ${{ needs.create-release.outputs.version }}"
          echo ""
          
          # Check for .env file
          if [ ! -f .env ]; then
            echo "Error: .env file not found!"
            echo "Please copy .env.template to .env and fill in the values"
            exit 1
          fi
          
          # Pull latest images
          docker-compose -f docker-compose.prod.yml pull
          
          # Run database migrations
          docker-compose -f docker-compose.prod.yml run --rm backend python app/database/init_schemas.py
          
          # Start services
          docker-compose -f docker-compose.prod.yml up -d
          
          echo "Deployment complete!"
          EOF
          
          chmod +x deployment/deploy.sh
          
          # Create archive
          tar -czf pfinni-deployment-${{ needs.create-release.outputs.version }}.tar.gz deployment/
      
      - name: Upload deployment bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./pfinni-deployment-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: pfinni-deployment-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release, docker-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update version in docs
        run: |
          # Update version references in documentation
          find . -name "*.md" -type f -exec sed -i "s/version: .*/version: ${{ needs.create-release.outputs.version }}/g" {} +
          find . -name "*.md" -type f -exec sed -i "s/pfinni-backend:v.*/pfinni-backend:${{ needs.create-release.outputs.version }}/g" {} +
          find . -name "*.md" -type f -exec sed -i "s/pfinni-frontend:v.*/pfinni-frontend:${{ needs.create-release.outputs.version }}/g" {} +
      
      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "docs: Update version to ${{ needs.create-release.outputs.version }}"
          git push

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-release, create-artifacts]
    if: ${{ !contains(needs.create-release.outputs.version, '-') }}
    environment:
      name: production
      url: https://pfinni.com
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying version ${{ needs.create-release.outputs.version }} to production..."
          # Add actual deployment commands here