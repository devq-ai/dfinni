name: Deploy to Cloudflare

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'patient-dashboard/**'
      - '.github/workflows/deploy-cloudflare.yml'

env:
  NODE_VERSION: '20'

jobs:
  deploy-frontend:
    name: Deploy Frontend to Cloudflare Workers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: patient-dashboard/frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: patient-dashboard/frontend
        run: npm ci
      
      - name: Build application
        working-directory: patient-dashboard/frontend
        run: |
          npm run build
          npx @opennextjs/cloudflare build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_API_URL: https://api.devq.ai
          NEXT_PUBLIC_CLERK_SIGN_IN_URL: /sign-in
          NEXT_PUBLIC_CLERK_SIGN_UP_URL: /sign-up
          NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: /dashboard
          NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: /dashboard
      
      - name: Create KV Namespace
        uses: cloudflare/wrangler-action@v3
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: kv namespace create "NEXT_CACHE_WORKERS_KV"
          workingDirectory: patient-dashboard/frontend
      
      - name: Create Pages Project
        uses: cloudflare/wrangler-action@v3
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages project create devq-ai --production-branch=main
          workingDirectory: patient-dashboard/frontend
      
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: patient-dashboard/frontend
          secrets: |
            CLERK_SECRET_KEY
        env:
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

  deploy-backend-worker:
    name: Deploy Backend Worker to Cloudflare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Worker files
        run: |
          mkdir -p cloudflare-worker
          
          # Create the worker script
          cat > cloudflare-worker/worker.js << 'EOF'
          export default {
            async fetch(request, env) {
              // Get the original URL
              const url = new URL(request.url);
              
              // CORS headers
              const corsHeaders = {
                'Access-Control-Allow-Origin': 'https://devq.ai',
                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, PATCH',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
                'Access-Control-Allow-Credentials': 'true',
                'Access-Control-Max-Age': '86400',
              };

              // Handle CORS preflight
              if (request.method === 'OPTIONS') {
                return new Response(null, { 
                  status: 204,
                  headers: corsHeaders 
                });
              }

              try {
                // Route to your backend running on Mac Studio via Cloudflare Tunnel
                // The tunnel makes your local backend available at db.devq.ai
                const backendUrl = new URL(url.pathname + url.search, 'https://db.devq.ai:8001');
                
                // Forward the request
                const backendResponse = await fetch(backendUrl, {
                  method: request.method,
                  headers: request.headers,
                  body: request.body,
                  // Important: Don't follow redirects automatically
                  redirect: 'manual'
                });

                // Create response with CORS headers
                const response = new Response(backendResponse.body, {
                  status: backendResponse.status,
                  statusText: backendResponse.statusText,
                  headers: backendResponse.headers
                });

                // Add CORS headers
                Object.entries(corsHeaders).forEach(([key, value]) => {
                  response.headers.set(key, value);
                });

                return response;
              } catch (error) {
                console.error('Worker error:', error);
                return new Response(JSON.stringify({ 
                  error: 'Internal Server Error',
                  message: error.message 
                }), {
                  status: 500,
                  headers: {
                    'Content-Type': 'application/json',
                    ...corsHeaders
                  }
                });
              }
            }
          };
          EOF
          
          # Create wrangler.toml
          cat > cloudflare-worker/wrangler.toml << 'EOF'
          name = "pfinni-api"
          main = "worker.js"
          compatibility_date = "2024-01-01"

          [env.production]
          name = "pfinni-api-production"
          routes = [
            { pattern = "api.devq.ai/*", zone_name = "devq.ai" }
          ]

          [env.production.vars]
          ENVIRONMENT = "production"
          EOF
          
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: cloudflare-worker
          command: deploy --env production